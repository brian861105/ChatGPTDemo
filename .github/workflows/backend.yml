# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Backend CI/CD Pipeline

on:
  push:
    paths:
      - 'backend/**'
  pull_request:
    paths:
      - 'backend/**' 
  workflow_dispatch:
    inputs:
      build_binary:
        description: 'Build AOT binary'
        required: false
        type: boolean
        default: false
      build_image:
        description: 'Build Docker image'
        required: false
        type: boolean
        default: false

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Install ReportGenerator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
    
    - name: Run Tests with Coverage
      run: ./test.sh
    
    # 生成 Markdown 摘要以顯示在 GitHub Actions 摘要頁面
    - name: Generate Markdown Summary
      run: |
        reportgenerator \
        -reports:"AuthServer/AuthServer.Tests/coverage.cobertura.xml" \
        -targetdir:"coveragereport_md" \
        -reporttypes:MarkdownSummary
    
    # 將摘要添加到 GitHub Actions 工作流程摘要
    - name: Add Coverage Summary to Job Summary
      run: cat coveragereport_md/Summary.md >> $GITHUB_STEP_SUMMARY
    
    # 上傳 HTML 覆蓋率報告作為構建產物
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: ./backend/coveragereport

  build-aot:
    name: AOT Compilation
    needs: test
    if: (github.event_name == 'pull_request' && github.base_ref == 'main') || (github.event_name == 'workflow_dispatch' && inputs.build_binary)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: AOT Compilation
      run: dotnet publish --configuration Release -p:PublishAot=true --self-contained true -o ../publish
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: aot-build
        path: ./publish/
        retention-days: 7

  build-docker:
    name: Build Docker Image
    needs: build-aot
    # 只在 PR 到 main 或手动触发时运行
    if: (github.event_name == 'pull_request' && github.base_ref == 'main') || (github.event_name == 'workflow_dispatch' && inputs.build_image)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: aot-build
        path: ./publish/
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request' # Only login for pushes, not PRs
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: your-organization/backend-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha,format=short
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./backend/Dockerfile
        push: ${{ github.event_name != 'pull_request' }} # Only push on non-PR events
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max